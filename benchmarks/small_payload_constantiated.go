// Code generated by json-constantiater DO NOT EDIT

package benchmark

import "github.com/sapphi-red/json-constantiater/lib"

func (t *SmallPayload) NewJsonMarshal() []byte {
	tmpPtr := lib.GetFromPool()
	tmp := *tmpPtr
	tmp = t.AppendJsonString(tmp)
	res := make([]byte, len(tmp))
	copy(res, tmp)
	*tmpPtr = tmp
	lib.PutToPool(tmpPtr)
	return res
}

func (t *SmallPayload) AppendJsonString(res []byte) []byte {
	res = append(res, `{"st":`...)
	if t.St < lib.NSmalls {
		res = lib.AppendSmallInt(res, t.St)
	} else {
		res = lib.AppendInt(res, t.St)
	}
	res = append(res, `,"sid":`...)
	if t.Sid < lib.NSmalls {
		res = lib.AppendSmallInt(res, t.Sid)
	} else {
		res = lib.AppendInt(res, t.Sid)
	}
	res = append(res, `,"tt":"`...)
	res = lib.AppendByteWithEscape(res, t.Tt)
	res = append(res, `","gr":`...)
	if 0 <= t.Gr {
		if t.Gr < lib.NSmalls {
			res = lib.AppendSmallInt(res, t.Gr)
		} else {
			res = lib.AppendInt(res, t.Gr)
		}
	} else {
		if -lib.NSmalls < t.Gr {
			res = lib.AppendSmallMinusInt(res, t.Gr)
		} else {
			res = lib.AppendInt(res, t.Gr)
		}
	}
	res = append(res, `,"uuid":"`...)
	res = append(res, t.Uuid...)
	res = append(res, `","ip":"`...)
	res = append(res, t.Ip...)
	res = append(res, `","ua":"`...)
	res = lib.AppendByteWithEscape(res, t.Ua)
	res = append(res, `","tz":`...)
	if 0 <= t.Tz {
		res = lib.AppendSmallInt(res, t.Tz)
	} else {
		res = lib.AppendSmallMinusInt(res, t.Tz)
	}
	res = append(res, `,"v":`...)
	res = lib.AppendSmallInt(res, t.V)
	res = append(res, '}')
	return res
}

func (t *SmallPayloadNonOptimized) NewJsonMarshal() []byte {
	tmpPtr := lib.GetFromPool()
	tmp := *tmpPtr
	tmp = t.AppendJsonString(tmp)
	res := make([]byte, len(tmp))
	copy(res, tmp)
	*tmpPtr = tmp
	lib.PutToPool(tmpPtr)
	return res
}

func (t *SmallPayloadNonOptimized) AppendJsonString(res []byte) []byte {
	res = append(res, `{"st":`...)
	if 0 <= t.St {
		if t.St < lib.NSmalls {
			res = lib.AppendSmallInt(res, t.St)
		} else {
			res = lib.AppendInt(res, t.St)
		}
	} else {
		if -lib.NSmalls < t.St {
			res = lib.AppendSmallMinusInt(res, t.St)
		} else {
			res = lib.AppendInt(res, t.St)
		}
	}
	res = append(res, `,"sid":`...)
	if 0 <= t.Sid {
		if t.Sid < lib.NSmalls {
			res = lib.AppendSmallInt(res, t.Sid)
		} else {
			res = lib.AppendInt(res, t.Sid)
		}
	} else {
		if -lib.NSmalls < t.Sid {
			res = lib.AppendSmallMinusInt(res, t.Sid)
		} else {
			res = lib.AppendInt(res, t.Sid)
		}
	}
	res = append(res, `,"tt":"`...)
	res = lib.AppendByteWithEscape(res, t.Tt)
	res = append(res, `","gr":`...)
	if 0 <= t.Gr {
		if t.Gr < lib.NSmalls {
			res = lib.AppendSmallInt(res, t.Gr)
		} else {
			res = lib.AppendInt(res, t.Gr)
		}
	} else {
		if -lib.NSmalls < t.Gr {
			res = lib.AppendSmallMinusInt(res, t.Gr)
		} else {
			res = lib.AppendInt(res, t.Gr)
		}
	}
	res = append(res, `,"uuid":"`...)
	res = lib.AppendByteWithEscape(res, t.Uuid)
	res = append(res, `","ip":"`...)
	res = lib.AppendByteWithEscape(res, t.Ip)
	res = append(res, `","ua":"`...)
	res = lib.AppendByteWithEscape(res, t.Ua)
	res = append(res, `","tz":`...)
	if 0 <= t.Tz {
		if t.Tz < lib.NSmalls {
			res = lib.AppendSmallInt(res, t.Tz)
		} else {
			res = lib.AppendInt(res, t.Tz)
		}
	} else {
		if -lib.NSmalls < t.Tz {
			res = lib.AppendSmallMinusInt(res, t.Tz)
		} else {
			res = lib.AppendInt(res, t.Tz)
		}
	}
	res = append(res, `,"v":`...)
	if 0 <= t.V {
		if t.V < lib.NSmalls {
			res = lib.AppendSmallInt(res, t.V)
		} else {
			res = lib.AppendInt(res, t.V)
		}
	} else {
		if -lib.NSmalls < t.V {
			res = lib.AppendSmallMinusInt(res, t.V)
		} else {
			res = lib.AppendInt(res, t.V)
		}
	}
	res = append(res, '}')
	return res
}
