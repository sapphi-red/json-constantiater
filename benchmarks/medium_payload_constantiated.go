// Code generated by json-constantiater DO NOT EDIT

package benchmark

import "github.com/sapphi-red/json-constantiater/lib"

func (t *CBAvatar) NewJsonMarshal() []byte {
	res := make([]byte, 0, t.JsonLen())
	return t.AppendJsonString(res)
}

//go:nosplit
func (t *CBAvatar) AppendJsonString(res []byte) []byte {
	res = append(res, "{\"url\":\""...)
	res = append(res, t.Url...)
	res = append(res, "\","...)
	res[len(res)-1] = '}'
	return res
}

//go:nosplit
func (t *CBAvatar) JsonLen() int {
	l := 2
	l += 2 + len(t.Url)
	l += 2 + 3 + 1 + 1
	return l - 1
}

func (t *Avatars) NewJsonMarshal() []byte {
	res := make([]byte, 0, t.JsonLen())
	return t.AppendJsonString(res)
}

//go:nosplit
func (t *Avatars) AppendJsonString(res []byte) []byte {
	res = append(res, '[')

	for _, e := range *t {
		if e == nil {
			res = append(res, `null`...)
		} else {
			res = e.AppendJsonString(res)
		}
		res = append(res, ',')
	}
	res[len(res)-1] = ']'
	return res
}

//go:nosplit
func (t *Avatars) JsonLen() int {
	l := 2
	for _, e := range *t {
		if e == nil {
			l += 4
		} else {
			l += e.JsonLen()
		}
		l += 1
	}
	return l - 1
}

//go:nosplit
func (t *Avatars) IsEmpty() bool {
	return len(*t) == 0
}

func (t *CBGravatar) NewJsonMarshal() []byte {
	res := make([]byte, 0, t.JsonLen())
	return t.AppendJsonString(res)
}

//go:nosplit
func (t *CBGravatar) AppendJsonString(res []byte) []byte {
	res = append(res, "{\"avatars\":"...)
	res = t.Avatars.AppendJsonString(res)
	res = append(res, ',')
	res[len(res)-1] = '}'
	return res
}

//go:nosplit
func (t *CBGravatar) JsonLen() int {
	l := 2
	l += t.Avatars.JsonLen()
	l += 2 + 7 + 1 + 1
	return l - 1
}

func (t *CBGithub) NewJsonMarshal() []byte {
	res := make([]byte, 0, t.JsonLen())
	return t.AppendJsonString(res)
}

//go:nosplit
func (t *CBGithub) AppendJsonString(res []byte) []byte {
	res = append(res, "{\"followers\":"...)
	res = lib.AppendInt(res, t.Followers)
	res = append(res, ',')
	res[len(res)-1] = '}'
	return res
}

//go:nosplit
func (t *CBGithub) JsonLen() int {
	l := 2
	l += 20
	l += 2 + 9 + 1 + 1
	return l - 1
}

func (t *CBName) NewJsonMarshal() []byte {
	res := make([]byte, 0, t.JsonLen())
	return t.AppendJsonString(res)
}

//go:nosplit
func (t *CBName) AppendJsonString(res []byte) []byte {
	res = append(res, "{\"fullName\":\""...)
	res = append(res, t.FullName...)
	res = append(res, "\","...)
	res[len(res)-1] = '}'
	return res
}

//go:nosplit
func (t *CBName) JsonLen() int {
	l := 2
	l += 2 + len(t.FullName)
	l += 2 + 8 + 1 + 1
	return l - 1
}

func (t *CBPerson) NewJsonMarshal() []byte {
	res := make([]byte, 0, t.JsonLen())
	return t.AppendJsonString(res)
}

//go:nosplit
func (t *CBPerson) AppendJsonString(res []byte) []byte {
	res = append(res, "{\"name\":"...)
	if t.Name == nil {
		res = append(res, `null`...)
	} else {
		res = t.Name.AppendJsonString(res)
	}
	res = append(res, ",\"github\":"...)
	if t.Github == nil {
		res = append(res, `null`...)
	} else {
		res = t.Github.AppendJsonString(res)
	}
	res = append(res, ",\"gravatar\":"...)
	if t.Gravatar == nil {
		res = append(res, `null`...)
	} else {
		res = t.Gravatar.AppendJsonString(res)
	}
	res = append(res, ',')
	res[len(res)-1] = '}'
	return res
}

//go:nosplit
func (t *CBPerson) JsonLen() int {
	l := 2
	if t.Name == nil {
		l += 4
	} else {
		l += t.Name.JsonLen()
	}
	l += 2 + 4 + 1 + 1
	if t.Github == nil {
		l += 4
	} else {
		l += t.Github.JsonLen()
	}
	l += 2 + 6 + 1 + 1
	if t.Gravatar == nil {
		l += 4
	} else {
		l += t.Gravatar.JsonLen()
	}
	l += 2 + 8 + 1 + 1
	return l - 1
}

func (t *MediumPayload) NewJsonMarshal() []byte {
	res := make([]byte, 0, t.JsonLen())
	return t.AppendJsonString(res)
}

//go:nosplit
func (t *MediumPayload) AppendJsonString(res []byte) []byte {
	res = append(res, "{\"person\":"...)
	if t.Person == nil {
		res = append(res, `null`...)
	} else {
		res = t.Person.AppendJsonString(res)
	}
	res = append(res, ",\"company\":\""...)
	res = lib.AppendByteWithEscape(res, t.Company)
	res = append(res, "\","...)
	res[len(res)-1] = '}'
	return res
}

//go:nosplit
func (t *MediumPayload) JsonLen() int {
	l := 2
	if t.Person == nil {
		l += 4
	} else {
		l += t.Person.JsonLen()
	}
	l += 2 + 6 + 1 + 1
	l += 2 + lib.GetEscapedLen(t.Company)
	l += 2 + 7 + 1 + 1
	return l - 1
}

func (t *CBAvatarNonOptimized) NewJsonMarshal() []byte {
	res := make([]byte, 0, t.JsonLen())
	return t.AppendJsonString(res)
}

//go:nosplit
func (t *CBAvatarNonOptimized) AppendJsonString(res []byte) []byte {
	res = append(res, "{\"url\":\""...)
	res = lib.AppendByteWithEscape(res, t.Url)
	res = append(res, "\","...)
	res[len(res)-1] = '}'
	return res
}

//go:nosplit
func (t *CBAvatarNonOptimized) JsonLen() int {
	l := 2
	l += 2 + lib.GetEscapedLen(t.Url)
	l += 2 + 3 + 1 + 1
	return l - 1
}

func (t *AvatarsNonOptimized) NewJsonMarshal() []byte {
	res := make([]byte, 0, t.JsonLen())
	return t.AppendJsonString(res)
}

//go:nosplit
func (t *AvatarsNonOptimized) AppendJsonString(res []byte) []byte {
	res = append(res, '[')

	for _, e := range *t {
		if e == nil {
			res = append(res, `null`...)
		} else {
			res = e.AppendJsonString(res)
		}
		res = append(res, ',')
	}
	res[len(res)-1] = ']'
	return res
}

//go:nosplit
func (t *AvatarsNonOptimized) JsonLen() int {
	l := 2
	for _, e := range *t {
		if e == nil {
			l += 4
		} else {
			l += e.JsonLen()
		}
		l += 1
	}
	return l - 1
}

//go:nosplit
func (t *AvatarsNonOptimized) IsEmpty() bool {
	return len(*t) == 0
}

func (t *CBGravatarNonOptimized) NewJsonMarshal() []byte {
	res := make([]byte, 0, t.JsonLen())
	return t.AppendJsonString(res)
}

//go:nosplit
func (t *CBGravatarNonOptimized) AppendJsonString(res []byte) []byte {
	res = append(res, "{\"avatars\":"...)
	res = t.Avatars.AppendJsonString(res)
	res = append(res, ',')
	res[len(res)-1] = '}'
	return res
}

//go:nosplit
func (t *CBGravatarNonOptimized) JsonLen() int {
	l := 2
	l += t.Avatars.JsonLen()
	l += 2 + 7 + 1 + 1
	return l - 1
}

func (t *CBGithubNonOptimized) NewJsonMarshal() []byte {
	res := make([]byte, 0, t.JsonLen())
	return t.AppendJsonString(res)
}

//go:nosplit
func (t *CBGithubNonOptimized) AppendJsonString(res []byte) []byte {
	res = append(res, "{\"followers\":"...)
	res = lib.AppendInt(res, t.Followers)
	res = append(res, ',')
	res[len(res)-1] = '}'
	return res
}

//go:nosplit
func (t *CBGithubNonOptimized) JsonLen() int {
	l := 2
	l += 20
	l += 2 + 9 + 1 + 1
	return l - 1
}

func (t *CBNameNonOptimized) NewJsonMarshal() []byte {
	res := make([]byte, 0, t.JsonLen())
	return t.AppendJsonString(res)
}

//go:nosplit
func (t *CBNameNonOptimized) AppendJsonString(res []byte) []byte {
	res = append(res, "{\"fullName\":\""...)
	res = lib.AppendByteWithEscape(res, t.FullName)
	res = append(res, "\","...)
	res[len(res)-1] = '}'
	return res
}

//go:nosplit
func (t *CBNameNonOptimized) JsonLen() int {
	l := 2
	l += 2 + lib.GetEscapedLen(t.FullName)
	l += 2 + 8 + 1 + 1
	return l - 1
}

func (t *CBPersonNonOptimized) NewJsonMarshal() []byte {
	res := make([]byte, 0, t.JsonLen())
	return t.AppendJsonString(res)
}

//go:nosplit
func (t *CBPersonNonOptimized) AppendJsonString(res []byte) []byte {
	res = append(res, "{\"name\":"...)
	if t.Name == nil {
		res = append(res, `null`...)
	} else {
		res = t.Name.AppendJsonString(res)
	}
	res = append(res, ",\"github\":"...)
	if t.Github == nil {
		res = append(res, `null`...)
	} else {
		res = t.Github.AppendJsonString(res)
	}
	res = append(res, ",\"gravatar\":"...)
	if t.Gravatar == nil {
		res = append(res, `null`...)
	} else {
		res = t.Gravatar.AppendJsonString(res)
	}
	res = append(res, ',')
	res[len(res)-1] = '}'
	return res
}

//go:nosplit
func (t *CBPersonNonOptimized) JsonLen() int {
	l := 2
	if t.Name == nil {
		l += 4
	} else {
		l += t.Name.JsonLen()
	}
	l += 2 + 4 + 1 + 1
	if t.Github == nil {
		l += 4
	} else {
		l += t.Github.JsonLen()
	}
	l += 2 + 6 + 1 + 1
	if t.Gravatar == nil {
		l += 4
	} else {
		l += t.Gravatar.JsonLen()
	}
	l += 2 + 8 + 1 + 1
	return l - 1
}

func (t *MediumPayloadNonOptimized) NewJsonMarshal() []byte {
	res := make([]byte, 0, t.JsonLen())
	return t.AppendJsonString(res)
}

//go:nosplit
func (t *MediumPayloadNonOptimized) AppendJsonString(res []byte) []byte {
	res = append(res, "{\"person\":"...)
	if t.Person == nil {
		res = append(res, `null`...)
	} else {
		res = t.Person.AppendJsonString(res)
	}
	res = append(res, ",\"company\":\""...)
	res = lib.AppendByteWithEscape(res, t.Company)
	res = append(res, "\","...)
	res[len(res)-1] = '}'
	return res
}

//go:nosplit
func (t *MediumPayloadNonOptimized) JsonLen() int {
	l := 2
	if t.Person == nil {
		l += 4
	} else {
		l += t.Person.JsonLen()
	}
	l += 2 + 6 + 1 + 1
	l += 2 + lib.GetEscapedLen(t.Company)
	l += 2 + 7 + 1 + 1
	return l - 1
}
